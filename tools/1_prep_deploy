#!/bin/bash
do_run=1 # Execute(evaluate) the commands
#do_run=0 # Don't evaluate any commands
#
#MY_DIR=$(dirname $(readlink -f $0))
MY_DIR="/Users/i830671/git/conciletime/tools"
. $MY_DIR/common.sh
#echo $?
if [ $? -eq 1 ]; then
  echo ""
  echo "Copy the $MY_DIR/common.sh.template file to $MY_DIR/common.sh and adjust before continuing."
  echo ""
  cmd='cp '$MY_DIR/common.sh.template' '$MY_DIR/common.sh
  echo $cmd
  echo ""
  cmd='vi '$MY_DIR/common.sh
  echo $cmd
  echo ""
  exit
fi
echo ""
echo "Including common.sh from "$MY_DIR
echo ""
echo "host:$host port:$port tenant:$tenant org:$org xsa_user:$xsa_user"
xsorcf=$1
targetspace=$2
version=$3
echo "xsorcf:$xsorcf targetspace:$targetspace version:$version"
echo ""
#exit
tmpfile="/tmp/xscfenv.out"
dowait=""
doexport1=""
doexport2=""
if [ "$#" -eq 3 ]; then
  if [ $xsorcf = "xs" ]; then
    dowait=" --wait-indefinitely"
    doexport1=" --export-json /dev/stdout 2>/dev/null | tail -n +5 > $tmpfile"
    echo "XS cool."
  else
    if [ $xsorcf = "cf" ]; then
      doexport1=" | tail -n +5 | tail -r | tail -n +10 | tail -r > $tmpfile"
      doexport2=" | tail -r | tail -n +1 | tail -r"
      echo "CF cool."
    else
      echo "Not XS or CF, try again."
      exit 1
    fi
  fi

  targetspace_uc=$(echo "$targetspace" | tr a-z A-Z)
  targetspace_lc=$(echo "$targetspace" | tr A-Z a-z)

  version_uc=$(echo "$version" | tr a-z A-Z)
  version_lc=$(echo "$version" | tr A-Z a-z)

  echo Preparation for Deploy of TargetSpace $targetspace_uc in Org: $org with Version: $version_uc Starting...
  echo ""

  cmd=$xsorcf' target -o '$org' -s '$space
  echo $cmd
  #if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  #echo 'HDI SERVICE RESULT:'$RESULT


  # Potential target space creation

  cmd=$xsorcf' create-space '$targetspace_lc
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  #echo 'HDI SERVICE RESULT:'$RESULT

  echo ""


  # DB Permission reminder

  echo "Be sure to allow your HANA DB to create services instances in this space!."
  echo "Go to your SAP HANA Service Dashboard for your service instance and verify the Current Mappings or '+' to add a new one."
  echo ""

  cmd=$xsorcf' org '$org' --guid'
  #echo $cmd
  if [ $do_run -eq 1 ]; then echo -n 'Org GUID=' ; eval $cmd; fi
  #RESULT=$?

  #echo 'HDI SERVICE RESULT:'$RESULT

  cmd=$xsorcf' space '$targetspace_lc' --guid'
  #echo $cmd
  if [ $do_run -eq 1 ]; then echo -n 'Space GUID=' ; eval $cmd; fi
  #RESULT=$?

  #echo 'HDI SERVICE RESULT:'$RESULT

  echo ""

  # File manipulation
  #cmd='sed -e "s/xs_routing_mode=ports/xs_routing_mode=hostnames/g" -i "" auto_install.cfg'


  fromfile='mta_to_cf-xxx.mtaext'
  tofile='mta_to_cf-'$targetspace_lc'.mtaext'

  cmd='cp '$fromfile' '$tofile
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  cmd='sed -e "s/xxx/'$targetspace_lc'/g" -i "" '$tofile
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  cmd='sed -e "s/##/'$version_lc'/g" -i "" '$tofile
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?


  fromfile='xs-security-xxx.json'
  tofile='xs-security-'$targetspace_lc'.json'

  cmd='cp '$fromfile' '$tofile
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  cmd='sed -e "s/xxx/'$targetspace_lc'/g" -i "" '$tofile
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?


  fromfile='JenkinsfileXXX'
  tofile='Jenkinsfile'$targetspace_uc

  cmd='cp '$fromfile' '$tofile
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  cmd='sed -e "s/XXX/'$targetspace_uc'/g" -i "" '$tofile
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?


  fromfile='.pipeline/configXXX.yml'
  tofile='.pipeline/config'$targetspace_uc'.yml'

  cmd='cp '$fromfile' '$tofile
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  cmd='sed -e "s/xxx/'$targetspace_lc'/g" -i "" '$tofile
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  cmd='sed -e "s/##/'$version_lc'/g" -i "" '$tofile
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?


  fromfile='registry-config-xxx.json'
  tofile='registry-config-'$targetspace_uc'.json'

  cmd='cp '$fromfile' '$tofile
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  cmd='sed -e "s/xxx/'$targetspace_lc'/g" -i "" '$tofile
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  cmd='sed -e "s/XXX/'$targetspace_uc'/g" -i "" '$tofile
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  echo ""

  tofile='Jenkinsfile'$targetspace_uc
  echo "With git, add these new files, commit and push them to your git repo. And..."
  echo "Don't forget to go create your Jenkins build job to pull the "$tofile" specifically."
  echo ""

  echo "Also, be sure there is enough saas-registry, Application Logging and Application Runtime quota in the subaccount containing the $org organization for the deploy."
  echo ""

  echo "Note:  The first deploy attempt will fail due to the concile_utl_$version_lc not having been bound to the CONCILE_REG service yet."
  echo "       Run the following command to create the CONCILE_REG service instance and bind to it, then rerun the build."
  echo ""
  echo "tools/post_deploy $xsorcf $targetspace $version_lc"
  echo ""

  #exit 1

else
    echo "Usage ./prep_deploy xs[cf] targetspace version"
    exit 1
fi
echo ""
echo Preparation for Deploy of TargetSpace $targetspace_uc in Org: $org with Version: $version_uc Finished
echo ""
