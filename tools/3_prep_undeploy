#!/bin/bash
do_run=1 # Execute(evaluate) the commands
#do_run=0 # Don't evaluate any commands
#
#MY_DIR=$(dirname $(readlink -f $0))
MY_DIR="/Users/i830671/git/conciletime/tools"
. $MY_DIR/common.sh
#echo $?
if [ $? -eq 1 ]; then
  echo ""
  echo "Copy the $MY_DIR/common.sh.template file to $MY_DIR/common.sh and adjust before continuing."
  echo ""
  cmd='cp '$MY_DIR/common.sh.template' '$MY_DIR/common.sh
  echo $cmd
  echo ""
  cmd='vi '$MY_DIR/common.sh
  echo $cmd
  echo ""
  exit
fi
echo ""
echo "Including common.sh from "$MY_DIR
echo ""
echo "host:$host port:$port tenant:$tenant org:$org xsa_user:$xsa_user"
xsorcf=$1
targetspace=$2
version=$3
echo "xsorcf:$xsorcf targetspace:$targetspace version:$version"
echo ""
#exit
tmpfile="/tmp/xscfenv.out"
dowait=""
doexport1=""
doexport2=""
if [ "$#" -eq 3 ]; then
  if [ $xsorcf = "xs" ]; then
    dowait=" --wait-indefinitely"
    doexport1=" --export-json /dev/stdout 2>/dev/null | tail -n +5 > $tmpfile"
    echo "XS cool."
  else
    if [ $xsorcf = "cf" ]; then
      doexport1=" | tail -n +5 | tail -r | tail -n +10 | tail -r > $tmpfile"
      doexport2=" | tail -r | tail -n +1 | tail -r"
      echo "CF cool."
    else
      echo "Not XS or CF, try again."
      exit 1
    fi
  fi

  targetspace_uc=$(echo "$targetspace" | tr a-z A-Z)
  targetspace_lc=$(echo "$targetspace" | tr A-Z a-z)

  version_uc=$(echo "$version" | tr a-z A-Z)
  version_lc=$(echo "$version" | tr A-Z a-z)

  echo Undo Post things like unregistration for subscriptions of TargetSpace $targetspace Starting...
  echo ""

  cmd=$xsorcf' target -o '$org' -s '$targetspace
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  #echo 'HDI SERVICE RESULT:'$RESULT


  echo "In order for the following commands to work properly, you MUST make sure any existing subscriptions are removed first!"
  echo "This is completely described in the following HANA Academy Video by Phil."
  echo ""
  echo "SAP HANA Academy - SAP CP MT: 06. RESTful API"
  echo "https://www.youtube.com/watch?v=RjSKrDsnew0&list=PLkzo92owKnVx3Sh0nemX8GoSNzJGfsWJM&index=6"
  echo ""
  echo "Manually Deleting Subscriptions...Using Postman!  See snippets.txt in this project which is a customized version of the one in Phil's video."
  echo ""
  echo "You will need details revealed by this command."
  echo ""
  
  #cf env concile_utl_v0
  cmd=$xsorcf' env concile_utl_'$version_lc' | head'
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?


  #cf unbind-service concile_utl_v0 CONCILE_REG
  cmd=$xsorcf' unbind-service concile_utl_'$version_lc' CONCILE_REG'
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  #cf delete-service CONCILE_REG -f
  cmd=$xsorcf' delete-service CONCILE_REG -f'
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?


  echo "If you are now ready to undeploy concile, Continue to undeploy."
  echo "Note that using the --delete-services params will remove any HDI containers and their data!!!"
  echo ""

  cmd=$xsorcf' undeploy conciletime -f --delete-services'
  echo $cmd
  #if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  echo "DANGER!  The remainder of the script undeploys conciletime app but leaves the HDI container."

  echo -n "Continue(y/n)? "
  read continue_yn

  if echo "$continue_yn" | grep -iq "^y" ;then
    cmd=$xsorcf' undeploy conciletime -f'
    echo $cmd
    if [ $do_run -eq 1 ]; then eval $cmd; fi
    RESULT=$?

  else
    echo "Aborting..."
  fi

  echo ""
  
  #exit 1

else
    echo "Usage ./unpost_deploy xs[cf] targetspace version"
    exit 1
fi
echo ""
echo Undo Post things like unregistration for subscriptions of TargetSpace $targetspace Finished
echo ""
