#!/bin/bash
do_run=1 # Execute(evaluate) the commands
#do_run=0 # Don't evaluate any commands
#
#MY_DIR=$(dirname $(readlink -f $0))
MY_DIR="/Users/i830671/git/conciletime/tools"
. $MY_DIR/common.sh
#echo $?
if [ $? -eq 1 ]; then
  echo ""
  echo "Copy the $MY_DIR/common.sh.template file to $MY_DIR/common.sh and adjust before continuing."
  echo ""
  cmd='cp '$MY_DIR/common.sh.template' '$MY_DIR/common.sh
  echo $cmd
  echo ""
  cmd='vi '$MY_DIR/common.sh
  echo $cmd
  echo ""
  exit
fi
echo ""
echo "Including common.sh from "$MY_DIR
echo ""
echo "host:$host port:$port tenant:$tenant org:$org xsa_user:$xsa_user"
xsorcf=$1
targetspace=$2
version=$3
echo "xsorcf:$xsorcf targetspace:$targetspace version:$version"
echo ""
#exit
tmpfile="/tmp/xscfenv.out"
dowait=""
doexport1=""
doexport2=""
if [ "$#" -eq 3 ]; then
  if [ $xsorcf = "xs" ]; then
    dowait=" --wait-indefinitely"
    doexport1=" --export-json /dev/stdout 2>/dev/null | tail -n +5 > $tmpfile"
    echo "XS cool."
  else
    if [ $xsorcf = "cf" ]; then
      doexport1=" | tail -n +5 | tail -r | tail -n +10 | tail -r > $tmpfile"
      doexport2=" | tail -r | tail -n +1 | tail -r"
      echo "CF cool."
    else
      echo "Not XS or CF, try again."
      exit 1
    fi
  fi

  targetspace_uc=$(echo "$targetspace" | tr a-z A-Z)
  targetspace_lc=$(echo "$targetspace" | tr A-Z a-z)

  version_uc=$(echo "$version" | tr a-z A-Z)
  version_lc=$(echo "$version" | tr A-Z a-z)

  echo UnPreparation of TargetSpace $targetspace_uc in Org: $org with Version: $version_uc Starting...
  echo ""

  cmd=$xsorcf' target -o '$org' -s '$space
  echo $cmd
  #if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  #echo 'HDI SERVICE RESULT:'$RESULT

  # File manipulation
  #cmd='sed -e "s/xs_routing_mode=ports/xs_routing_mode=hostnames/g" -i "" auto_install.cfg'


  tofile='mta_to_cf-'$targetspace_lc'.mtaext'

  cmd='rm -f '$tofile
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  tofile='xs-security-'$targetspace_lc'.json'

  cmd='rm -f '$tofile
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  tofile='Jenkinsfile'$targetspace_uc

  cmd='rm -f '$tofile
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  tofile='.pipeline/config'$targetspace_uc'.yml'

  cmd='rm -f '$tofile
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  tofile='registry-config-'$targetspace_uc'.json'

  cmd='rm -f '$tofile
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?


  echo "Don't forget to go back and edit the "$tofile" and replace the ZZZZ with your appid."
  #cmd='sed -e "s/ZZZZ/'$version_lc'/g" -i "" '$tofile
  #echo $cmd
  ##if [ $do_run -eq 1 ]; then eval $cmd; fi
  ##RESULT=$?

  # DB Permission reminder

  echo "You may want to remove HANA DB to create services instances in this deleted space!."

  cmd=$xsorcf' org '$org' --guid'
  echo $cmd
  if [ $do_run -eq 1 ]; then echo -n 'Org GUID=' ; eval $cmd; fi
  #RESULT=$?

  #echo 'HDI SERVICE RESULT:'$RESULT

  cmd=$xsorcf' space '$targetspace_lc' --guid'
  echo $cmd
  if [ $do_run -eq 1 ]; then echo -n 'Space GUID=' ; eval $cmd; fi
  #RESULT=$?

  #echo 'HDI SERVICE RESULT:'$RESULT


  # Potential target space deletion

  cmd=$xsorcf' delete-space '$targetspace_lc' -f'
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  #echo 'HDI SERVICE RESULT:'$RESULT

  echo ""


  tofile='Jenkinsfile'$targetspace_uc
  echo "Don't forget to remove your Jenkins build job that pulls from the "$tofile"."

  echo ""
  
  #exit 1

else
    echo "Usage ./unprep_space xs[cf] targetspace version"
    exit 1
fi
echo ""
echo UnPreparation of TargetSpace $targetspace Finished
echo ""
