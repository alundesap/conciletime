#!/bin/bash
do_run=1 # Execute(evaluate) the commands
#do_run=0 # Don't evaluate any commands
#
#MY_DIR=$(dirname $(readlink -f $0))
MY_DIR="/Users/i830671/git/conciletime/tools"
. $MY_DIR/common.sh
#echo $?
if [ $? -eq 1 ]; then
  echo ""
  echo "Copy the $MY_DIR/common.sh.template file to $MY_DIR/common.sh and adjust before continuing."
  echo ""
  cmd='cp '$MY_DIR/common.sh.template' '$MY_DIR/common.sh
  echo $cmd
  echo ""
  cmd='vi '$MY_DIR/common.sh
  echo $cmd
  echo ""
  exit
fi
echo ""
echo "Including common.sh from "$MY_DIR
echo ""
echo "host:$host port:$port tenant:$tenant org:$org xsa_user:$xsa_user"
xsorcf=$1
targetspace=$2
version=$3
echo "xsorcf:$xsorcf targetspace:$targetspace version:$version"
echo ""
#exit
tmpfile="/tmp/xscfenv.out"
dowait=""
doexport1=""
doexport2=""
if [ "$#" -eq 3 ]; then
  if [ $xsorcf = "xs" ]; then
    dowait=" --wait-indefinitely"
    doexport1=" --export-json /dev/stdout 2>/dev/null | tail -n +5 > $tmpfile"
    echo "XS cool."
  else
    if [ $xsorcf = "cf" ]; then
      doexport1=" | tail -n +5 | tail -r | tail -n +10 | tail -r > $tmpfile"
      doexport2=" | tail -r | tail -n +1 | tail -r"
      echo "CF cool."
    else
      echo "Not XS or CF, try again."
      exit 1
    fi
  fi

  targetspace_uc=$(echo "$targetspace" | tr a-z A-Z)
  targetspace_lc=$(echo "$targetspace" | tr A-Z a-z)

  version_uc=$(echo "$version" | tr a-z A-Z)
  version_lc=$(echo "$version" | tr A-Z a-z)

  echo UnPreparation of TargetSpace $targetspace_uc in Org: $org with Version: $version_uc Starting...
  echo ""

  cmd=$xsorcf' target -o '$org' -s '$targetspace
  echo $cmd
  #if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  #echo 'HDI SERVICE RESULT:'$RESULT

  # File manipulation
  #cmd='sed -e "s/xs_routing_mode=ports/xs_routing_mode=hostnames/g" -i "" auto_install.cfg'


  tofile='mta_to_cf-'$targetspace_lc'.mtaext'

  cmd='rm -f '$tofile
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  tofile='xs-security-'$targetspace_lc'.json'

  cmd='rm -f '$tofile
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  tofile='Jenkinsfile'$targetspace_uc

  cmd='rm -f '$tofile
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  tofile='.pipeline/config'$targetspace_uc'.yml'

  cmd='rm -f '$tofile
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?

  tofile='registry-config-'$targetspace_uc'.json'

  cmd='rm -f '$tofile
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  #RESULT=$?


  # DB Permission reminder

  echo "DANGER!  The remainder of the script deletes any HDI container and removes the $targetspace space!."

  echo -n "Continue(y/n)? "
  read continue_yn

  if echo "$continue_yn" | grep -iq "^y" ;then

    cmd=$xsorcf' delete-service CONCILE_HDB'
    echo $cmd
    if [ $do_run -eq 1 ]; then eval $cmd; fi
    RESULT=$?

    cmd=$xsorcf' service CONCILE_HDB'
    echo $cmd
    if [ $do_run -eq 1 ]; then eval $cmd; fi
    RESULT=$?

      # Service creation is NOT guarenteed to happen right away
  # Might want to add a timeout counter...
    while [ $RESULT -eq 0 ]; do
      echo "Sleeping for 10secs..."
      sleep 10

      if [ $xsorcf = "xs" ]; then
        cmd=$xsorcf' service CONCILE_HDB'
        echo $cmd
        if [ $do_run -eq 1 ]; then eval $cmd; fi
        RESULT=$?
        #echo 'RESULT:'$RESULT
      else
        # Handle CF creation of services a bit differently
        # cf services | grep dat368-hdi | grep "create succeeded"
        cmd=$xsorcf' service CONCILE_HDB'
        echo $cmd
        if [ $do_run -eq 1 ]; then eval $cmd; fi
        RESULT=$?
        #echo 'RESULT:'$RESULT
      fi
    done

    cmd=$xsorcf' target -o '$org' -s '$space
    echo $cmd
    if [ $do_run -eq 1 ]; then eval $cmd; fi
    RESULT=$?

    # Potential target space deletion

    cmd=$xsorcf' delete-space '$targetspace_lc' -f'
    echo $cmd
    if [ $do_run -eq 1 ]; then eval $cmd; fi
    #RESULT=$?

    #echo 'HDI SERVICE RESULT:'$RESULT

    echo ""

    tofile='Jenkinsfile'$targetspace_uc
    echo "Don't forget to remove your Jenkins build job that pulls from the '$tofile'."
    echo "Also, refresh your IDE and git commit/push your removed files back to your repo."

    echo ""
  
  else
    echo "Aborting..."
  fi
  #exit 1

else
    echo "Usage ./unprep_space xs[cf] targetspace version"
    exit 1
fi
echo ""
echo UnPreparation of TargetSpace $targetspace Finished
echo ""
